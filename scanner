# Импортируем необходимые модули
import socket
import sys
from concurrent.futures import ThreadPoolExecutor, as_completed
from tqdm import tqdm

# Запрашиваем у пользователя имя хоста или IP-адрес для сканирования
def get_host():
    return input("Пожалуйста, введите имя хоста или IP-адрес для сканирования: ")

# Пытаемся разрешить имя хоста в IP-адрес
def resolve_host(host):
    try:
        return socket.gethostbyname(host)
    except socket.gaierror:
        print(f"Имя хоста '{host}' не может быть разрешено. Выход.")
        sys.exit()

# Определяем диапазон портов для сканирования
def get_port_range():
    start_port = 1
    end_port = 1024
    return start_port, end_port

# Информируем пользователя о начале сканирования
def start_scan_notification(host, host_ip, start_port, end_port):
    print(f"Начинаем сканирование хоста {host} ({host_ip}) с порта {start_port} до {end_port}")

# Определяем функцию, которая будет сканировать один порт
def scan_port(host_ip, port):
    """
    Пытается подключиться к заданному хосту на указанном порту.
    Возвращает номер порта, если он открыт.
    """
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.settimeout(1)  # Таймаут в секундах
    result = sock.connect_ex((host_ip, port))
    sock.close()
    if result == 0:
        # Если попытка подключения возвращает 0, порт открыт
        return port
    else:
        # Порт закрыт или фильтруется
        return None

# Основная функция для сканирования портов
def scan_ports(host_ip, start_port, end_port):
    open_ports = []
    
    try:
        # Используем ThreadPoolExecutor для управления пулом потоков
        with ThreadPoolExecutor(max_workers=100) as executor:
            # Словарь для отслеживания соответствия future и порта
            future_to_port = {executor.submit(scan_port, host_ip, port): port for port in range(start_port, end_port + 1)}
            
            # Создаем прогресс-бар
            with tqdm(total=end_port - start_port + 1, desc="Сканирование портов") as pbar:
                for future in as_completed(future_to_port):
                    port = future_to_port[future]
                    try:
                        result = future.result()
                        if result is not None:
                            open_ports.append(result)
                    except KeyboardInterrupt:
                        print("\nСканирование прервано пользователем.")
                        sys.exit()
                    except Exception as exc:
                        print(f"Порт {port} вызвал исключение: {exc}")
                    finally:
                        pbar.update(1)
        return open_ports
    except KeyboardInterrupt:
        print("\nСканирование прервано пользователем.")
        sys.exit()
    except socket.error as e:
        print(f"Ошибка сокета: {e}")
        sys.exit()

# Выводим открытые порты по порядку
def print_open_ports(open_ports):
    if open_ports:
        open_ports.sort()
        print("Открытые порты:")
        for port in open_ports:
            print(f"Порт {port} открыт")
    else:
        print("В указанном диапазоне не найдено открытых портов.")

# Основная функция для запуска сканирования
def main():
    host = get_host()
    host_ip = resolve_host(host)
    start_port, end_port = get_port_range()
    start_scan_notification(host, host_ip, start_port, end_port)
    open_ports = scan_ports(host_ip, start_port, end_port)
    print_open_ports(open_ports)
    print("Сканирование завершено.")

if __name__ == "__main__":
    main()
